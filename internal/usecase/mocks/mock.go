// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/SETTER2000/prove/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockProve is a mock of Prove interface.
type MockProve struct {
	ctrl     *gomock.Controller
	recorder *MockProveMockRecorder
}

// MockProveMockRecorder is the mock recorder for MockProve.
type MockProveMockRecorder struct {
	mock *MockProve
}

// NewMockProve creates a new mock instance.
func NewMockProve(ctrl *gomock.Controller) *MockProve {
	mock := &MockProve{ctrl: ctrl}
	mock.recorder = &MockProveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProve) EXPECT() *MockProveMockRecorder {
	return m.recorder
}

// CardListUserID mocks base method.
func (m *MockProve) CardListUserID(ctx context.Context, u *entity.User) (*entity.CardList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardListUserID", ctx, u)
	ret0, _ := ret[0].(*entity.CardList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardListUserID indicates an expected call of CardListUserID.
func (mr *MockProveMockRecorder) CardListUserID(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardListUserID", reflect.TypeOf((*MockProve)(nil).CardListUserID), ctx, u)
}

// ReadService mocks base method.
func (m *MockProve) ReadService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadService")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadService indicates an expected call of ReadService.
func (mr *MockProveMockRecorder) ReadService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadService", reflect.TypeOf((*MockProve)(nil).ReadService))
}

// Register mocks base method.
func (m *MockProve) Register(arg0 context.Context, arg1 *entity.Authentication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockProveMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockProve)(nil).Register), arg0, arg1)
}

// SaveCard mocks base method.
func (m *MockProve) SaveCard(arg0 context.Context, arg1 *entity.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCard indicates an expected call of SaveCard.
func (mr *MockProveMockRecorder) SaveCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCard", reflect.TypeOf((*MockProve)(nil).SaveCard), arg0, arg1)
}

// SavePass mocks base method.
func (m *MockProve) SavePass(arg0 context.Context, arg1 *entity.Pass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePass indicates an expected call of SavePass.
func (mr *MockProveMockRecorder) SavePass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePass", reflect.TypeOf((*MockProve)(nil).SavePass), arg0, arg1)
}

// SaveService mocks base method.
func (m *MockProve) SaveService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveService")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveService indicates an expected call of SaveService.
func (mr *MockProveMockRecorder) SaveService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveService", reflect.TypeOf((*MockProve)(nil).SaveService))
}

// SaveText mocks base method.
func (m *MockProve) SaveText(arg0 context.Context, arg1 *entity.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveText", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveText indicates an expected call of SaveText.
func (mr *MockProveMockRecorder) SaveText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveText", reflect.TypeOf((*MockProve)(nil).SaveText), arg0, arg1)
}

// ShortLink mocks base method.
func (m *MockProve) ShortLink(arg0 context.Context, arg1 *entity.Prove) (*entity.Prove, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortLink", arg0, arg1)
	ret0, _ := ret[0].(*entity.Prove)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortLink indicates an expected call of ShortLink.
func (mr *MockProveMockRecorder) ShortLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortLink", reflect.TypeOf((*MockProve)(nil).ShortLink), arg0, arg1)
}

// UserFindByID mocks base method.
func (m *MockProve) UserFindByID(arg0 context.Context, arg1 string) (*entity.Authentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Authentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindByID indicates an expected call of UserFindByID.
func (mr *MockProveMockRecorder) UserFindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindByID", reflect.TypeOf((*MockProve)(nil).UserFindByID), arg0, arg1)
}

// UserFindByLogin mocks base method.
func (m *MockProve) UserFindByLogin(arg0 context.Context, arg1 string) (*entity.Authentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindByLogin", arg0, arg1)
	ret0, _ := ret[0].(*entity.Authentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindByLogin indicates an expected call of UserFindByLogin.
func (mr *MockProveMockRecorder) UserFindByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindByLogin", reflect.TypeOf((*MockProve)(nil).UserFindByLogin), arg0, arg1)
}

// MockProveRepo is a mock of ProveRepo interface.
type MockProveRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProveRepoMockRecorder
}

// MockProveRepoMockRecorder is the mock recorder for MockProveRepo.
type MockProveRepoMockRecorder struct {
	mock *MockProveRepo
}

// NewMockProveRepo creates a new mock instance.
func NewMockProveRepo(ctrl *gomock.Controller) *MockProveRepo {
	mock := &MockProveRepo{ctrl: ctrl}
	mock.recorder = &MockProveRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProveRepo) EXPECT() *MockProveRepoMockRecorder {
	return m.recorder
}

// CardListGetUserID mocks base method.
func (m *MockProveRepo) CardListGetUserID(arg0 context.Context, arg1 *entity.User) (*entity.CardList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardListGetUserID", arg0, arg1)
	ret0, _ := ret[0].(*entity.CardList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardListGetUserID indicates an expected call of CardListGetUserID.
func (mr *MockProveRepoMockRecorder) CardListGetUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardListGetUserID", reflect.TypeOf((*MockProveRepo)(nil).CardListGetUserID), arg0, arg1)
}

// Delete mocks base method.
func (m *MockProveRepo) Delete(arg0 context.Context, arg1 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProveRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProveRepo)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockProveRepo) Get(arg0 context.Context, arg1 *entity.Prove) (*entity.Prove, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*entity.Prove)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProveRepoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProveRepo)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockProveRepo) GetAll(arg0 context.Context, arg1 *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProveRepoMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProveRepo)(nil).GetAll), arg0, arg1)
}

// GetAllUrls mocks base method.
func (m *MockProveRepo) GetAllUrls() (entity.CountURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUrls")
	ret0, _ := ret[0].(entity.CountURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUrls indicates an expected call of GetAllUrls.
func (mr *MockProveRepoMockRecorder) GetAllUrls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUrls", reflect.TypeOf((*MockProveRepo)(nil).GetAllUrls))
}

// GetAllUsers mocks base method.
func (m *MockProveRepo) GetAllUsers() (entity.CountUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].(entity.CountUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockProveRepoMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockProveRepo)(nil).GetAllUsers))
}

// GetByID mocks base method.
func (m *MockProveRepo) GetByID(arg0 context.Context, arg1 string) (*entity.Authentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Authentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProveRepoMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProveRepo)(nil).GetByID), arg0, arg1)
}

// GetByLogin mocks base method.
func (m *MockProveRepo) GetByLogin(arg0 context.Context, arg1 string) (*entity.Authentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", arg0, arg1)
	ret0, _ := ret[0].(*entity.Authentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockProveRepoMockRecorder) GetByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockProveRepo)(nil).GetByLogin), arg0, arg1)
}

// Post mocks base method.
func (m *MockProveRepo) Post(arg0 context.Context, arg1 *entity.Prove) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockProveRepoMockRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockProveRepo)(nil).Post), arg0, arg1)
}

// Put mocks base method.
func (m *MockProveRepo) Put(arg0 context.Context, arg1 *entity.Prove) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockProveRepoMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockProveRepo)(nil).Put), arg0, arg1)
}

// Read mocks base method.
func (m *MockProveRepo) Read() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockProveRepoMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockProveRepo)(nil).Read))
}

// Registry mocks base method.
func (m *MockProveRepo) Registry(arg0 context.Context, arg1 *entity.Authentication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registry indicates an expected call of Registry.
func (mr *MockProveRepoMockRecorder) Registry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockProveRepo)(nil).Registry), arg0, arg1)
}

// Save mocks base method.
func (m *MockProveRepo) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProveRepoMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProveRepo)(nil).Save))
}

// SaveCard mocks base method.
func (m *MockProveRepo) SaveCard(arg0 context.Context, arg1 *entity.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCard indicates an expected call of SaveCard.
func (mr *MockProveRepoMockRecorder) SaveCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCard", reflect.TypeOf((*MockProveRepo)(nil).SaveCard), arg0, arg1)
}

// SavePass mocks base method.
func (m *MockProveRepo) SavePass(arg0 context.Context, arg1 *entity.Pass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePass indicates an expected call of SavePass.
func (mr *MockProveRepoMockRecorder) SavePass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePass", reflect.TypeOf((*MockProveRepo)(nil).SavePass), arg0, arg1)
}

// SaveText mocks base method.
func (m *MockProveRepo) SaveText(arg0 context.Context, arg1 *entity.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveText", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveText indicates an expected call of SaveText.
func (mr *MockProveRepoMockRecorder) SaveText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveText", reflect.TypeOf((*MockProveRepo)(nil).SaveText), arg0, arg1)
}
