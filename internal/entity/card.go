package entity

import (
	"fmt"
	"github.com/SETTER2000/prove/config"
	"github.com/SETTER2000/prove/pkg/er"
	"github.com/SETTER2000/prove/scripts/luna"
	validation "github.com/go-ozzo/ozzo-validation"
	"strconv"
)

type (
	CardList []CardResponse

	CardResponse struct {
		*config.Config `json:"-"`
		Number         string `json:"number,omitempty"`
		MetaData       string `json:"meta_data,omitempty"`
		UploadedAt     string `json:"uploaded_at" db:"uploaded_at"`
		UserID         string `json:"user_id,omitempty" db:"user_id"`
	}
	Card struct {
		Number   string `json:"number"  validate:"required"`
		MetaData string `json:"meta_data,omitempty"`
		UserID   string `json:"user_id,omitempty"`
	}
)

func (c *Card) Validate() error {
	return validation.ValidateStruct(
		c, validation.Field(&c.Number, validation.Required),
		//validation.Field(&c.Number, validation.By(requiredIf(c.EncryptPassword == "")), validation.Length(1, 64)),
	)
	//return validation.ValidateStruct(a, validation.Field(&a.Email, validation.Required, is.Email))
}

func (c *Card) Luna() error {
	number, err := strconv.Atoi(c.Number)
	if err != nil {
		return er.ErrValidCard
	}
	// –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
	if !luna.Luna(number) { // ...—Ü–≤–µ—Ç—ã, —Ü–≤–µ—Ç—ã üòÅ
		fmt.Println("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã")
		return er.ErrValidCard
	}
	return nil
}

// Sanitize –æ—á–∏—â–∞–µ—Ç –ø–æ–ª—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –æ–Ω–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –≤ –æ—Ç–≤–µ—Ç–µ
func (c *Card) Sanitize() {
	c.UserID = ""
}
